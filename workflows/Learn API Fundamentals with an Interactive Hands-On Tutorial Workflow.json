{
  "active": false,
  "connections": {
    "BASE URL": {
      "main": [
        [
          {
            "node": "1. The Customer (GET Menu Item)",
            "type": "main",
            "index": 0
          },
          {
            "node": "2. The Customer (GET with Query Params)",
            "type": "main",
            "index": 0
          },
          {
            "node": "3. The Customer (POST with Body)",
            "type": "main",
            "index": 0
          },
          {
            "node": "4. The Customer (GET with Headers/Auth)",
            "type": "main",
            "index": 0
          },
          {
            "node": "5. The Customer (Request with Timeout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Authorized": {
      "main": [
        [
          {
            "node": "Respond with Secret",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond with Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Tutorial": {
      "main": [
        [
          {
            "node": "BASE URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3 seconds": {
      "main": [
        [
          {
            "node": "Respond Slowly",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF extra cheese": {
      "main": [
        [
          {
            "node": "Respond with Cheese",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond with Plain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. The Kitchen (GET /menu)": {
      "main": [
        [
          {
            "node": "Respond with Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. The Kitchen (GET /order)": {
      "main": [
        [
          {
            "node": "IF extra cheese",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. The Kitchen (POST /review)": {
      "main": [
        [
          {
            "node": "Respond to Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. The Customer (GET Menu Item)": {
      "main": [
        []
      ]
    },
    "3. The Customer (POST with Body)": {
      "main": [
        []
      ]
    },
    "4. The Kitchen (GET /secret-dish)": {
      "main": [
        [
          {
            "node": "IF Authorized",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5. The Kitchen (GET /slow-service)": {
      "main": [
        [
          {
            "node": "Wait 3 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. The Customer (GET with Query Params)": {
      "main": [
        []
      ]
    },
    "4. The Customer (GET with Headers/Auth)": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-07-17T04:10:40.317Z",
  "id": "7ngxa4i1gF5I6bwe",
  "isArchived": false,
  "meta": {
    "templateId": "5171"
  },
  "name": "Learn API Fundamentals with an Interactive Hands-On Tutorial Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "500527a4-9764-4e12-92f5-cac0dcc6d10b",
      "name": "Start Tutorial",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        1120,
        592
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "/tutorial/api/menu",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "41f0f626-eb75-40c9-ae3c-2ad247731885",
      "name": "1. The Kitchen (GET /menu)",
      "type": "n8n-nodes-base.webhook",
      "position": [
        2416,
        592
      ],
      "webhookId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "item",
              "type": "string",
              "value": "Pizza"
            },
            {
              "id": "67890",
              "name": "price",
              "type": "number",
              "value": 12
            }
          ]
        },
        "options": {}
      },
      "id": "5d0c582c-9de2-4bbd-b514-cf8833c0078a",
      "name": "Respond with Menu",
      "type": "n8n-nodes-base.set",
      "position": [
        2640,
        592
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "url": "={{ $('BASE URL').last().json.your_n8n_base_url }}/menu",
        "options": {}
      },
      "id": "6b72ccb7-2a86-4853-b5c5-2e05063231a2",
      "name": "1. The Customer (GET Menu Item)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2112,
        592
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "content": "### Tutorial - What is an API?\n\nWelcome! This workflow will teach you the basics of APIs (Application Programming Interfaces).\n\n**What is an API?**\nThink of it like ordering food at a restaurant.\n- **You** are the \"Client\" (the **HTTP Request** node). You want something.\n- The **Kitchen** is the \"Server\" (the **Webhook** node). It has the data/service you want.\n- The **API** is the **Waiter and the Menu**. It's the set of rules and options you have for making a request and getting a response.\n\n\n**How to use this tutorial:**\n1.  Click **\"Execute Workflow\"**. The workflow will run from top to bottom.\n2.  Explore each \"Lesson\" by clicking on the **HTTP Request** node (the Customer) and its corresponding **Webhook** node (the Kitchen).\n3.  Read the sticky note for each lesson to understand the concept being demonstrated.",
        "height": 520,
        "width": 880
      },
      "id": "61453ac8-362c-4bf9-8c7f-3546a8f51bf6",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### Lesson 1: The Basics (Method & URL)\n\nThis is the simplest possible request.\n\n- **URL (Uniform Resource Locator):** This is the **address of the restaurant's kitchen**. The HTTP Request node needs to know exactly where to send the order. We use a special n8n expression to get the Webhook's test address automatically.\n\n- **Method: `GET`**: This is **what you want to do**. `GET` means you simply want to **retrieve** or **get** information. It's like asking the waiter, \"What's on the menu today?\"\n\n\n**➡️ Look at the output of the HTTP Request node. It received exactly what the Webhook is configured to listen to!**",
        "height": 480,
        "width": 880,
        "color": 7
      },
      "id": "963b1dce-eb8b-460a-a332-85e690f9ebd1",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2032,
        288
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ $('BASE URL').last().json.your_n8n_base_url }}/order",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "extra_cheese",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "067de22c-8dde-45b0-b12c-2581fe5ee82c",
      "name": "2. The Customer (GET with Query Params)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2112,
        1168
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "path": "/tutorial/api/order",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "dfc50d7c-f4b4-41e6-9fde-1afd45bd740d",
      "name": "2. The Kitchen (GET /order)",
      "type": "n8n-nodes-base.webhook",
      "position": [
        2416,
        1168
      ],
      "webhookId": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "order",
              "type": "string",
              "value": "Pizza with extra cheese"
            }
          ]
        },
        "options": {}
      },
      "id": "4d2ec461-1ce8-4bb2-a816-5b5032c6376a",
      "name": "Respond with Cheese",
      "type": "n8n-nodes-base.set",
      "position": [
        2848,
        1072
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "order",
              "type": "string",
              "value": "Plain Pizza"
            }
          ]
        },
        "options": {}
      },
      "id": "f06d2605-3114-42a2-9678-d1c6fcc78e62",
      "name": "Respond with Plain",
      "type": "n8n-nodes-base.set",
      "position": [
        2848,
        1264
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### Lesson 2: Customizing a Request (Query Parameters)\n\nWhat if you want to customize your order? That's what Query Parameters are for.\n\n**Query Parameters:** These are simple options added to the end of the URL after a `?`. They are key-value pairs used to filter, sort, or specify what you want.\n\nIt's like telling the waiter, \"I'll have the pizza... **and can you add extra cheese?**\"\n\n`?extra_cheese=true` is the query parameter.\n\n**➡️ The Webhook node uses an IF node to check for this parameter and changes its response accordingly.\nTry setting the value to `false` in the HTTP Request node and run it again!**",
        "height": 640,
        "width": 1120,
        "color": 7
      },
      "id": "f0796062-a671-473e-8fa8-becf4df1ce1d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2032,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('BASE URL').last().json.your_n8n_base_url }}/review",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "comment",
              "value": "I'm so happy !!"
            }
          ]
        },
        "options": {}
      },
      "id": "e789ea65-f365-4657-af7c-3cb48d5f2c52",
      "name": "3. The Customer (POST with Body)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2112,
        1760
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/tutorial/api/review",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "66688c28-04cd-4c2e-8533-82aa2450becf",
      "name": "3. The Kitchen (POST /review)",
      "type": "n8n-nodes-base.webhook",
      "position": [
        2416,
        1760
      ],
      "webhookId": "c3d4e5f6-a7b8-9012-3456-7890abcdef12",
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "status",
              "type": "string",
              "value": "review_received"
            },
            {
              "id": "67890",
              "name": "your_comment",
              "type": "string",
              "value": "={{ $json.body.comment }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7f894c9c-d2b0-42dd-bc23-4f9475e0e5df",
      "name": "Respond to Review",
      "type": "n8n-nodes-base.set",
      "position": [
        2640,
        1760
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### Lesson 3: Sending Data (POST & Body)\n\nSometimes, you don't want to *get* data, you want to *send* it.\n\n- **Method: `POST`**: This method is used to **send new data** to the server. It's like handing the waiter a completed customer feedback card.\n\n- **Body:** This is the **actual data you are sending**. Since you're sending more complex information than a simple query parameter, it goes in a separate \"package\" called the body.\n\n\n**➡️ The HTTP Request sends a JSON object in its body. The Webhook receives it and includes your comment in its response.**",
        "height": 460,
        "width": 880,
        "color": 7
      },
      "id": "d899505f-127b-4b21-9616-de10fe08b3e9",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2032,
        1488
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ $('BASE URL').last().json.your_n8n_base_url }}/secret-dish",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "your-api-key-for-example"
            }
          ]
        },
        "options": {}
      },
      "id": "8b797af9-1ef7-4171-b1ef-f1d2bd19daf8",
      "name": "4. The Customer (GET with Headers/Auth)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2112,
        2320
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "path": "/tutorial/api/secret-dish",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "3d51cbcb-1bc4-4fb7-9356-1c4a92744026",
      "name": "4. The Kitchen (GET /secret-dish)",
      "type": "n8n-nodes-base.webhook",
      "position": [
        2416,
        2320
      ],
      "webhookId": "d4e5f6a7-b8c9-0123-4567-890abcdef123",
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "dish",
              "type": "string",
              "value": "The Chef's Special Truffle Pasta"
            }
          ]
        },
        "options": {}
      },
      "id": "b54cfc3b-d778-473e-98f0-e44625112c52",
      "name": "Respond with Secret",
      "type": "n8n-nodes-base.set",
      "position": [
        2848,
        2224
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "error",
              "type": "string",
              "value": "You are not authorized"
            }
          ]
        },
        "options": {}
      },
      "id": "aa2fffb1-e28c-4b91-8b17-6784d0aaafb5",
      "name": "Respond with Error",
      "type": "n8n-nodes-base.set",
      "position": [
        2848,
        2432
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### Lesson 4: Identification (Headers & Auth)\n\nHeaders contain meta-information *about* your request. They're not part of the data itself, but they provide important context. Authentication is a common use case.\n\n- **Headers:** Think of this as **showing your VIP membership card** or whispering a secret password to the waiter. It's information that proves who you are or what your request's properties are.\n\n- **Authentication (Auth):** This is the process of proving your identity. Here, we use a custom header (`x-auth-token`) as a \"secret key\".\n\n\n**➡️ The Webhook checks for the correct secret key in the headers. If it's wrong or missing, it denies the request!**",
        "height": 620,
        "width": 1120,
        "color": 7
      },
      "id": "a8233025-dcc9-49e9-8e9c-3aeb993cd81d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2032,
        1984
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ $('BASE URL').last().json.your_n8n_base_url }}/slow-service",
        "options": {
          "timeout": 2000
        }
      },
      "id": "f4329ae3-5b44-4d04-a18a-e5ad9475cdbe",
      "name": "5. The Customer (Request with Timeout)",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2112,
        2960
      ],
      "typeVersion": 4.1,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "path": "/tutorial/api/slow-service",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "70657e1b-f8a8-443a-9d01-98d0dc073d96",
      "name": "5. The Kitchen (GET /slow-service)",
      "type": "n8n-nodes-base.webhook",
      "position": [
        2416,
        2960
      ],
      "webhookId": "e5f6a7b8-c9d0-1234-5678-90abcdef1234",
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12345",
              "name": "status",
              "type": "string",
              "value": "Finally, your food is here!"
            }
          ]
        },
        "options": {}
      },
      "id": "ecb8a39c-88a0-4b6a-9f8b-5ac5e63cce3c",
      "name": "Respond Slowly",
      "type": "n8n-nodes-base.set",
      "position": [
        2848,
        2960
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### Lesson 5: Being Patient (Timeout)\n\nAn API request isn't instant. What if the kitchen is really busy?\n\n- **Timeout:** This is the **maximum amount of time (in milliseconds) you are willing to wait** for a response before you give up and walk away.\n\n\nIn this example:\n- The **Kitchen (Webhook)** has a 3-second delay.\n- The **Customer (HTTP Request)** is only willing to wait for 2 seconds (2000 ms).\n\n**➡️ This request is designed to FAIL! The customer gives up before the kitchen can finish the order. This is crucial for preventing your workflows from getting stuck forever waiting for a slow service.**",
        "height": 500,
        "width": 1120,
        "color": 7
      },
      "id": "087db781-41f5-4de2-b4a3-e9f53ffb7ab5",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2032,
        2640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 3
      },
      "id": "10fa759b-3729-41d8-88c4-b06852261f12",
      "name": "Wait 3 seconds",
      "type": "n8n-nodes-base.wait",
      "position": [
        2640,
        2960
      ],
      "webhookId": "9a79d11e-fb6d-4bc1-89a3-0276182bd9f9",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "ca861c2d-78d9-403b-8bab-28d8e7dcf39c",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.headers['x-api-key'] }}",
              "rightValue": "your-api-key-for-example"
            }
          ]
        },
        "options": {}
      },
      "id": "bd3288ba-e7cf-43b1-b918-ac37bd437788",
      "name": "IF Authorized",
      "type": "n8n-nodes-base.if",
      "position": [
        2640,
        2320
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "ca861c2d-78d9-403b-8bab-28d8e7dcf39c",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.query.extra_cheese }}",
              "rightValue": "your-api-key-for-example"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "c0bbea62-d40a-4966-bf0a-c30970192686",
      "name": "IF extra cheese",
      "type": "n8n-nodes-base.if",
      "position": [
        2640,
        1168
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "## Was this helpful? Let me know!\n\nI really hope this tutorial helped you understand APIs better. Your feedback is incredibly valuable and helps me create better resources for the n8n community.\n\n### **Share Your Thoughts & Ideas**\n\nWhether you have a suggestion, found a typo, or just want to say thanks, I'd love to hear from you!\nHere's a simple n8n form built for this purpose:\n\n#### ➡️ **[Click here to give feedback](https://api.ia2s.app/form/templates/feedback?template=API%20Tutorial)**\n\n### **Ready to Build Something Great?**\n\nIf you're looking to take your n8n skills or business automation to the next level, I can help.\n\n**🎓 n8n Coaching:** Want to become an n8n pro? I offer one-on-one coaching sessions to help you master workflows, tackle specific problems, and build with confidence.\n#### ➡️ **[Book a Coaching Session](https://api.ia2s.app/form/templates/coaching?template=API%20Tutorial)**\n\n**💼 n8n Consulting:** Have a complex project, an integration challenge, or need a custom workflow built for your business? Let's work together to create a powerful automation solution.\n#### ➡️ **[Inquire About Consulting Services](https://api.ia2s.app/form/templates/consulting?template=API%20Tutorial)**\n\n---\n\nHappy Automating!\nLucas Peyrin",
        "height": 800,
        "width": 540,
        "color": 4
      },
      "id": "6703362c-a47a-4c4d-ba0e-7b9464376134",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3200,
        2352
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ✨ **Action Required for n8n Cloud Users** ✨\n\nIf you're using the **n8n cloud version**, the default setting in this node will cause an `access to env vars denied` error.\n\nThis is normal and easy to fix! Just follow these two steps:\n\n### **1. Find Your Webhook URL**\n\n*   Open any Webhook trigger node in this workflow (like the one for `GET /menu`).\n*   Copy the **Production URL**. You only need the base part.\n\n    **Example:**\n    If your URL is `https://my-instance.app.n8n.cloud/webhook/1/abc/xyz`\n    ...you only need to copy: `https://my-instance.app.n8n.cloud/webhook`\n\n### **2. Update This \"BASE URL\" Node**\n\n*   In this node, replace the entire expression in the **Value** field with the URL you just copied.\n\n    **REPLACE THIS:**\n    ```\n    {{ $env.WEBHOOK_URL + ($env.N8N_ENDPOINT_WEBHOOK ?? \"webhook\") }}/tutorial/api\n    ```\n    **WITH YOUR URL:**\n    ```\n    https://your-instance.app.n8n.cloud/webhook/tutorial/api\n    ```\n*   Don't forget the `/tutorial/api` part !!\n\n\nThat's it! Your tutorial API will now work correctly.",
        "height": 900,
        "width": 700,
        "color": 3
      },
      "id": "d1ec26e3-f248-41bc-b42c-617dee62dbe7",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        -144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7edededc-2f40-4b8e-b8db-ab4816f1a28e",
              "name": "your_n8n_base_url",
              "type": "string",
              "value": "={{ $env.WEBHOOK_URL + ($env.N8N_ENDPOINT_WEBHOOK ?? \"webhook\") }}/tutorial/api"
            }
          ]
        },
        "options": {}
      },
      "id": "c0baeacb-f28f-47d6-be03-0886a4ef9d37",
      "name": "BASE URL",
      "type": "n8n-nodes-base.set",
      "position": [
        1600,
        592
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-17T04:10:40.317Z",
  "versionId": "bc53488a-00b9-4fbf-9576-3fb90ef158ed"
}